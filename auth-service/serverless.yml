service: auth-service
frameworkVersion: '3'

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUTH0_PUBLIC_KEY: ${file(secret.pem)}
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    SECRET_KEY: ${self:custom.UsersTable.arn}
    API_GATEWAY_AUCTION: ${self:custom.ApiGatewayAuction.arn}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - ${self:custom.UsersTable.arn}
        - !Join ['/', ['${self:custom.UsersTable.arn}', 'index', 'UniqueIdIndex']]
        
functions:
  auth:
    handler: src/handlers/auth.handler
    events:
      - http:
          path: /auth
          method: post
          cors: true
  publicEndpoint:
    handler: src/handlers/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  privateEndpoint:
    handler: src/handlers/private.handler
    events:
      - http:
          path: private
          method: POST
          authorizer: auth
          cors: true
  createUser:
    handler: src/handlers/createUser.handler
    events:
      - http:
          path: users
          method: POST
          cors: true
  signingUser:
    handler: src/handlers/signInUser.handler
    events:
      - http:
          path: auth/signin
          method: POST
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UniqueIdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
                

    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
  
    AuthLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName: 
          Fn::GetAtt:
            - auth
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn: "arn:aws:execute-api:us-east-1:338975015168:ymxsw3y1ee/*/*"
custom:
  UsersTable:
    name: !Ref UsersTable
    arn:  !GetAtt UsersTable.Arn
  ApiGatewayAuction:
    arn: arn:aws:execute-api:us-east-1:338975015168:ymxsw3y1ee/*/*
  bundle:
    linting: false

